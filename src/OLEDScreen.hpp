#pragma once
#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

const unsigned char boot_logo_bits[] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x67, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x1f, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x1f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9e, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0x9f, 0x7f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0x9f, 0x7f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xfd, 0xff, 0xfd, 0x8f, 0x7f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xf8, 0xff, 0xfc, 0xc7, 0x7f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf9, 0xff, 0xfc, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xdf, 0xfc, 0x91, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0x87, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0x03, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x9f, 0x03, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x9f, 0x83, 0x9f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xdf, 0xef, 0x9f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xcf, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xdf, 0xcf, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xcf, 0xcf, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xcf, 0xef, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xcf, 0xef, 0xfe, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xe7, 0xf7, 0xfc, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x11, 0xf9, 0xf0, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xc9, 0xfc, 0x0f, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xe6, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0x7f, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xee, 0xff, 0x3f, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xdc, 0xff, 0x9f, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x9d, 0xff, 0xcf, 0xfc, 0x09, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x39, 0xff, 0xcf, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfe, 0x7b, 0xff, 0xe6, 0x07, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x77, 0xff, 0xe1, 0xfc, 0x1c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xf3, 0xf0, 0x7e, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfe, 0x2f, 0xff, 0xff, 0xe0, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfe, 0x8f, 0xff, 0xc7, 0xc1, 0xf7, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc, 0xcf, 0xff, 0xe1, 0xff, 0xf7, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfd, 0xc7, 0xff, 0xfc, 0x3f, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfd, 0xc0, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfd, 0xc8, 0x3f, 0xff, 0xff, 0xf3, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfd, 0xef, 0x07, 0xff, 0xff, 0xf3, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfd, 0xef, 0xe1, 0xff, 0xff, 0xe4, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc, 0xef, 0xf0, 0x7f, 0xff, 0xcd, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc, 0xef, 0xfe, 0x0f, 0xfe, 0x1c, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfe, 0x6f, 0xff, 0x80, 0x00, 0x7e, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x2f, 0xff, 0xe0, 0x03, 0xfe, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x2f, 0xff, 0xff, 0xff, 0xfe, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0x4f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0x4f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff};

const unsigned char wifi_icon_bits[] PROGMEM = {
    0xff, 0xf0, 0xf9, 0xf0, 0xe6, 0x70, 0x9f, 0x90, 0x70, 0xe0, 0xef, 0x70, 0xd9, 0xb0, 0xb6, 0xd0,
    0xef, 0x70, 0xf9, 0xf0, 0xf9, 0xf0, 0xff, 0xf0};

const unsigned char ap_icon_bits[] PROGMEM = {
    0xcf, 0x30, 0x9f, 0x90, 0xa6, 0x50, 0x4f, 0x20, 0x50, 0xa0, 0x50, 0xa0, 0x49, 0x20, 0x29, 0x40,
    0x99, 0x90, 0xc9, 0x30, 0xf9, 0xf0, 0xf9, 0xf0};

const unsigned char battery_icon_bits[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x80, 0x20, 0xbf, 0xb0, 0xbf, 0xb0, 0xbf, 0xb0, 0x80, 0x20,
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

const uint8_t OLED_Text_Max_Length = 64;

struct OLEDConfig
{
    char text[OLED_Text_Max_Length];
    uint8_t text_size = 1;
    uint16_t text_color = SSD1306_WHITE; // ✅ 字体颜色
    uint16_t bg_color = SSD1306_BLACK;   // ✅ 背景色（目前 GFX 库不支持自动背景，但可手动处理）
    uint8_t cursor_x = 0;                // ✅ 光标位置 X
    uint8_t cursor_y = 0;                // ✅ 光标位置 Y
    bool clear_screen = true;            // ✅ 是否清屏（默认 true）
};

const uint8_t OLED_Screen_Height = 64;
const uint8_t OLED_Screen_Width = 128;

Adafruit_SSD1306 display(OLED_Screen_Width, OLED_Screen_Height, &Wire, -1);
SemaphoreHandle_t semphr_OLEDScreenMutex = NULL;
void InitOLEDScreen();
void playBootAnimation();
void drawOLEDMainData();
void drawOLEDStatusBar();

void updateOLEDScreen(const OLEDConfig &cfg);
void safeUpdateOLEDScreen(const OLEDConfig &cfg);

void InitOLEDScreen()
{
    bool success = display.begin(SSD1306_SWITCHCAPVCC, 0x3c);
    if (!success)
    {
        Serial0_Println("SSD1306 initialization failed!");
        return;
    }
    Serial0_Println("SSD1306 initialization succeed!");
    semphr_OLEDScreenMutex = xSemaphoreCreateMutex();
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.println("System Booting...");
    display.display();
    vTaskDelay(pdMS_TO_TICKS(500));
}

void playBootAnimation()
{
    if (xSemaphoreTake(semphr_OLEDScreenMutex, portMAX_DELAY) == pdTRUE)
    {
        // 静态显示保持几百 ms
        display.clearDisplay();
        display.drawBitmap(0, 0, boot_logo_bits, 128, 64, SSD1306_WHITE);
        display.display();
        Serial0_Println("Play Boot Animation");
        vTaskDelay(pdMS_TO_TICKS(2000));
        display.clearDisplay();
        xSemaphoreGive(semphr_OLEDScreenMutex);
    }
}

void drawOLEDMainData()
{
    if (xSemaphoreTake(semphr_OLEDScreenMutex, portMAX_DELAY) == pdTRUE)
    {
        // 获取 MPU 数据（带 mutex）
        MPUResult mpu;
        safeGetAngles(mpu);

        // 获取堆信息（你也可以封一层 safeGetHeap()）
        size_t total = ESP.getHeapSize();
        size_t free = ESP.getFreeHeap();
        size_t minFree = esp_get_minimum_free_heap_size();

        // 清除主区域
        display.fillRect(0, 13, 128, 64 - 13, SSD1306_BLACK);

        display.setCursor(0, 15);
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);

        display.printf("Roll:   %+6.1f\n", mpu.roll);
        display.printf("Pitch:  %+6.1f\n", mpu.pitch);
        display.printf("ZTilt:  %+6.1f\n", mpu.ztilt);
        display.printf("Heap:   %d/%d KB\n", (int)(free / 1024), (int)(total / 1024));
        display.printf("MinFree:%d KB\n", (int)(minFree / 1024));

        display.display();
        xSemaphoreGive(semphr_OLEDScreenMutex);
    }
}
void drawOLEDStatusBar()
{
    // 获取状态
    if (xSemaphoreTake(semphr_OLEDScreenMutex, portMAX_DELAY) == pdTRUE)
    {
        bool wifiConnected = WiFi.isConnected();
        bool apActive = WiFi.softAPgetStationNum() > 0;
        int batteryPercent = 100; //! For now I use Fake Data here
        // safeGetBatteryLevel(batteryPercent);  // 你自带 mutex 的数据接口

        // 清除状态栏区域（顶部 12 行）
        display.fillRect(0, 0, 128, 12, SSD1306_BLACK);

        int cursor = 0;
        if (wifiConnected)
        {
            display.drawBitmap(cursor, 0, wifi_icon_bits, 12, 12, SSD1306_WHITE);
            cursor += 16; // 图标+间距
        }
        if (apActive)
        {
            display.drawBitmap(cursor, 0, ap_icon_bits, 12, 12, SSD1306_WHITE);
            cursor += 16;
        }

        // 电量显示（右上角）
        int batteryX = 128 - 12 - 30; // 图标 + 文本区
        display.drawBitmap(batteryX, 0, battery_icon_bits, 12, 12, SSD1306_WHITE);

        display.setCursor(batteryX + 14, 2);
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.printf("%3d%%", batteryPercent);

        display.display();
        xSemaphoreGive(semphr_OLEDScreenMutex);
    }
}

void updateOLEDScreen(const OLEDConfig &cfg)
{
    if (cfg.clear_screen)
    {
        display.clearDisplay();
    }
    display.setCursor(cfg.cursor_x, cfg.cursor_y);
    display.setTextSize(cfg.text_size > 0 ? cfg.text_size : 1);
    display.setTextColor(cfg.text_color);
    display.println(strlen(cfg.text) > 0 ? cfg.text : "(no text)");
    display.display();
}

void safeUpdateOLEDScreen(const OLEDConfig &cfg)
{
    if (xSemaphoreTake(semphr_OLEDScreenMutex, portMAX_DELAY) == pdTRUE)
    {
        updateOLEDScreen(cfg);
        xSemaphoreGive(semphr_OLEDScreenMutex);
    }
}